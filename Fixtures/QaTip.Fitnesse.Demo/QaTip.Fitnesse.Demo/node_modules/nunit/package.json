{
  "name": "nunit",
  "version": "0.2.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/nealxyc/nunit.js.git"
  },
  "keywords": [
    "unit",
    "test"
  ],
  "author": {
    "name": "Neal Xiong"
  },
  "license": "MIT",
  "gitHead": "3b5a05e5f12b4f4f0cc00bff8dcc1f9cd3ca7912",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nealxyc/nunit.js/issues"
  },
  "directories": {
    "test": "test"
  },
  "description": "NUnit.js - Neal's unit test framework for JavaScript. ",
  "main": "nunit.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "readme": "NUnit.js\r\n========\r\n\r\nNeal's unit test framework for JavaScript. \r\n\r\n* No callbacks and closures. Simple and Intuitive. Easier to understand and write tests.\r\n* Pure JavaScript based. Runnable in browser or in NodeJS.\r\n* A similar syntax to JUnit test framework. Less learning curve for developer who is already familiar with the most popular Java unit test framework.\r\n\r\n## v0.2.1\r\n\r\n### Usage\r\n\r\n#### In browser\r\n\r\n\t<!-- Include nunit.js -->\r\n\t<script src=\"../nunit.js\"></script>\r\n\t<script>\r\n\tvar name = \"world\";\r\n\tvar test = new NUnit.Test(\"Test Hello world\"); // Create a test module (test case)\r\n\ttest.myTest = function(assert){ // Every method on the test module is a test. \r\n\t    assert.equals(\"hello world!\", \"hello \" + name + \"!\");\r\n\t  };\r\n\t</script>\r\n\t<!-- nunit-browser.js contains the driver script that looks for all the test modules and runs them with built-in test runner. -->\r\n\t<!-- It also provides a mini reporter for displaying test results -->\r\n\t<script src=\"nunit-browser.js\"></script>\r\n\r\n#### In NodeJS\r\n\r\n\tvar nunit = require(\"nunit\");\r\n\tvar test = new NUnit.Test(\"Test Hello Node!\");\r\n\ttest.myTest = function(assert){\r\n\t    assert.equals(\"hello Node!\", \"hello \" + \"Node\" + \"!\");\r\n\t  };\r\n\tnunit.execute(); //Use default configuration to run all test modules.\r\n\r\n\r\n### API doc\r\n\r\n#### NUnit.Test\r\n* A test module (or test object) is an instance of `NUnit.Test` class.\r\n\r\n\t\tvar test = new NUnit.Test(\"Test description.\");\r\n\r\n* Every function on this module object are treated as one test except these four: `before`, `after`, `beforeAll`, and `afterAll`. \r\n* If `before` and `after` was defined on the test object, they will run before and after each test respectively.\r\n* If `beforeAll` and `afterAll` was defined on the test object, they will run before and after all tests respectively.\r\n\r\n\r\n#### NUnit.Assert\r\n##### Accessing the assert object\r\nThere are two ways to get to the assert object.\r\n* From `assert` attribute of the test module\r\n\r\n\t\tvar test = new NUnit.Test(\"a test module\");\r\n\t\tvar a = test.assert ;\r\n\r\n* From the first argument of the test function:\r\n\r\n\t\ttest.myTest = function(a){\r\n\t\t\ta.assertTrue(true);\r\n\t\t}\r\n\r\n* And they are equivalent:\r\n\r\n\t\ttest.testAssert = function(a){\r\n\t\t\ta.strictEquals(a, this.assert);\r\n\t\t}\r\n\r\n##### Assert functions\r\n* **equals(obj1, obj2, desc)**  (Aliases: **eq, equal, assertEqual, assertEquals**)\r\n\t\r\n\tAsserts `obj1` equals to `obj2`. It uses `==` to compare the two. For javascript object it also tries `JSON.stringify(obj1) == JSON.stringify(obj2)`. Do not use to compare two null value. Use **#isNull** to assert a null(or undefined) value.\r\n* **strictEquals(obj1, obj2, desc)** (Aliases: **strictEqual, assertStrictEqual, assertStrictEquals**)\r\n\r\n\tAsserts `obj1` is strictly equal to (`===`) `obj2` \r\n* **notEqual(obj1, obj2, desc)** (Aliases: **neq, notEquals, assertNotEqual**)\r\n\r\n\tAsserts not equal.\r\n* **isTrue(obj, desc)** (Aliases: **t, assertTrue**)\r\n\r\n\tAsserts `obj` is `true`.\r\n* **isFalse(obj, desc)** (Aliases: **f, assertFalse**)\r\n\r\n\tAsserts `obj` is `false`.\r\n* **isNull(obj, desc)** (Alias: **assertNull**)\r\n\r\n\tAsserts `obj` is `null` or `undefined`.\r\n* **notNull(obj, desc)** (Alias: **assertNotNull**)\r\n\r\n\tAsserts `obj` is not `null` or `undefined`.\r\n* **fail(msg)**: Fails the current test with message `msg`. \r\n* **contains(obj1, obj2, desc)** (Alias: **contain**)\r\n\r\n\tAsserts `obj1` contains `obj2`. It uses `indexOf` function on `obj1`.\r\n* **exception(callback, desc)**: Asserts that the `callback` will throw an error.\r\n* **tracer()**: Returns a `Tracer` object. A `Tracer` object is useful to assure an asynchronized callback has actually been called as well as to verify the number of times it's called.\r\n\t+ **Tracer**\r\n\t\t- **trace(desc)**: Adds 1 to the trace count every time it is called.\r\n\t\t- **once(desc)**: Adds 1 to the trace count the first time it is called. It uses `desc` to identify different calls.\r\n\t\t- **verify(count, desc)**: Veryfies the total number of trace count is `count` and throws error if failed.\r\n\t+ For example:\r\n\t\t\r\n\t\t\ttest.testTracer = function(a){\r\n\t\t\t\tvar tr = assert.tracer();\r\n\t\t\t\ta.notNull(tr);\r\n\t\t\t\tfor(var i = 0 ; i < 10; i++){\r\n\t\t\t\t\ttr.trace();\r\n\t\t\t\t\ttr.once();\r\n\t\t\t\t\ttr.once();//same `desc` as tr.once() above, so it will take no effect\r\n\t\t\t\t\ttr.once(\"second trace.once()\");\r\n\t\t\t\t}\r\n\t\t\t\ttr.verify(12);\r\n\t\t\t}\r\n\t\t\r\n\r\n\r\n\r\n",
  "_id": "nunit@0.2.1",
  "dist": {
    "shasum": "9ab9814e7e2707a346e1f12ee14fb46db646ffb4",
    "tarball": "https://registry.npmjs.org/nunit/-/nunit-0.2.1.tgz"
  },
  "_from": "nunit@latest",
  "_npmVersion": "1.2.30",
  "_npmUser": {
    "name": "nealxyc",
    "email": "nealxyc@gmail.com"
  },
  "maintainers": [
    {
      "name": "nealxyc",
      "email": "nealxyc@gmail.com"
    }
  ],
  "_shasum": "9ab9814e7e2707a346e1f12ee14fb46db646ffb4",
  "_resolved": "https://registry.npmjs.org/nunit/-/nunit-0.2.1.tgz"
}
